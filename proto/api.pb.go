// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/api.proto

/*
Package client is a generated protocol buffer package.

It is generated from these files:
	proto/api.proto

It has these top-level messages:
	Block
	FileMeta
	Directory
	Volume
	HostStash
	OpenRequest
	GetBlockRequest
	GetBlockResponse
	AppendToBlockRequest
	DeleteBlockRequest
	WriteResult
	NewDirectoryContract
	AcquireFileWriteLockContract
	ReleaseFileWriteLockContract
	TouchFileContract
	FileWriteLock
	Nothing
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Block struct {
	Hash  []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Key   []byte   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Hosts []uint64 `protobuf:"varint,1,rep,packed,name=hosts" json:"hosts,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Block) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Block) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Block) GetHosts() []uint64 {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type FileMeta struct {
	Name         string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size         uint64   `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	LastModified uint64   `protobuf:"varint,3,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	CreatedAt    uint64   `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	BlockSize    uint32   `protobuf:"varint,6,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	Key          []byte   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Blocks       []*Block `protobuf:"bytes,8,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *FileMeta) Reset()                    { *m = FileMeta{} }
func (m *FileMeta) String() string            { return proto.CompactTextString(m) }
func (*FileMeta) ProtoMessage()               {}
func (*FileMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileMeta) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileMeta) GetLastModified() uint64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *FileMeta) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *FileMeta) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *FileMeta) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *FileMeta) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type Directory struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key   []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Files [][]byte `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *Directory) Reset()                    { *m = Directory{} }
func (m *Directory) String() string            { return proto.CompactTextString(m) }
func (*Directory) ProtoMessage()               {}
func (*Directory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Directory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Directory) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Directory) GetFiles() [][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type Volume struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key          []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Replications uint32 `protobuf:"varint,3,opt,name=replications" json:"replications,omitempty"`
	BlockSize    uint32 `protobuf:"varint,4,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	RootDir      []byte `protobuf:"bytes,5,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Volume) GetReplications() uint32 {
	if m != nil {
		return m.Replications
	}
	return 0
}

func (m *Volume) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *Volume) GetRootDir() []byte {
	if m != nil {
		return m.RootDir
	}
	return nil
}

type HostStash struct {
	HostId   uint64 `protobuf:"varint,1,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	Capacity uint64 `protobuf:"varint,2,opt,name=capacity" json:"capacity,omitempty"`
	Used     uint64 `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	Owner    uint64 `protobuf:"varint,4,opt,name=owner" json:"owner,omitempty"`
}

func (m *HostStash) Reset()                    { *m = HostStash{} }
func (m *HostStash) String() string            { return proto.CompactTextString(m) }
func (*HostStash) ProtoMessage()               {}
func (*HostStash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HostStash) GetHostId() uint64 {
	if m != nil {
		return m.HostId
	}
	return 0
}

func (m *HostStash) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *HostStash) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *HostStash) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

type OpenRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *OpenRequest) Reset()                    { *m = OpenRequest{} }
func (m *OpenRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenRequest) ProtoMessage()               {}
func (*OpenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OpenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpenRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetBlockRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetBlockRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetBlockResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetBlockResponse) Reset()                    { *m = GetBlockResponse{} }
func (m *GetBlockResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBlockResponse) ProtoMessage()               {}
func (*GetBlockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetBlockResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppendToBlockRequest struct {
	BlockSize uint64 `protobuf:"varint,1,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AppendToBlockRequest) Reset()                    { *m = AppendToBlockRequest{} }
func (m *AppendToBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendToBlockRequest) ProtoMessage()               {}
func (*AppendToBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AppendToBlockRequest) GetBlockSize() uint64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *AppendToBlockRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AppendToBlockRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteBlockRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteBlockRequest) Reset()                    { *m = DeleteBlockRequest{} }
func (m *DeleteBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBlockRequest) ProtoMessage()               {}
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteBlockRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type WriteResult struct {
	Succeed bool   `protobuf:"varint,1,opt,name=succeed" json:"succeed,omitempty"`
	Remains uint64 `protobuf:"varint,2,opt,name=remains" json:"remains,omitempty"`
	Key     []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *WriteResult) Reset()                    { *m = WriteResult{} }
func (m *WriteResult) String() string            { return proto.CompactTextString(m) }
func (*WriteResult) ProtoMessage()               {}
func (*WriteResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *WriteResult) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *WriteResult) GetRemains() uint64 {
	if m != nil {
		return m.Remains
	}
	return 0
}

func (m *WriteResult) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type NewDirectoryContract struct {
	ParentDir []byte     `protobuf:"bytes,1,opt,name=parent_dir,json=parentDir,proto3" json:"parent_dir,omitempty"`
	Dir       *Directory `protobuf:"bytes,3,opt,name=dir" json:"dir,omitempty"`
}

func (m *NewDirectoryContract) Reset()                    { *m = NewDirectoryContract{} }
func (m *NewDirectoryContract) String() string            { return proto.CompactTextString(m) }
func (*NewDirectoryContract) ProtoMessage()               {}
func (*NewDirectoryContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NewDirectoryContract) GetParentDir() []byte {
	if m != nil {
		return m.ParentDir
	}
	return nil
}

func (m *NewDirectoryContract) GetDir() *Directory {
	if m != nil {
		return m.Dir
	}
	return nil
}

type AcquireFileWriteLockContract struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *AcquireFileWriteLockContract) Reset()                    { *m = AcquireFileWriteLockContract{} }
func (m *AcquireFileWriteLockContract) String() string            { return proto.CompactTextString(m) }
func (*AcquireFileWriteLockContract) ProtoMessage()               {}
func (*AcquireFileWriteLockContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AcquireFileWriteLockContract) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ReleaseFileWriteLockContract struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ReleaseFileWriteLockContract) Reset()                    { *m = ReleaseFileWriteLockContract{} }
func (m *ReleaseFileWriteLockContract) String() string            { return proto.CompactTextString(m) }
func (*ReleaseFileWriteLockContract) ProtoMessage()               {}
func (*ReleaseFileWriteLockContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReleaseFileWriteLockContract) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type TouchFileContract struct {
	ClientTime uint64 `protobuf:"varint,1,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Dir        []byte `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`
	Volume     []byte `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *TouchFileContract) Reset()                    { *m = TouchFileContract{} }
func (m *TouchFileContract) String() string            { return proto.CompactTextString(m) }
func (*TouchFileContract) ProtoMessage()               {}
func (*TouchFileContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TouchFileContract) GetClientTime() uint64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *TouchFileContract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TouchFileContract) GetDir() []byte {
	if m != nil {
		return m.Dir
	}
	return nil
}

func (m *TouchFileContract) GetVolume() []byte {
	if m != nil {
		return m.Volume
	}
	return nil
}

type FileWriteLock struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Owner uint64 `protobuf:"varint,2,opt,name=owner" json:"owner,omitempty"`
	Key   []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *FileWriteLock) Reset()                    { *m = FileWriteLock{} }
func (m *FileWriteLock) String() string            { return proto.CompactTextString(m) }
func (*FileWriteLock) ProtoMessage()               {}
func (*FileWriteLock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FileWriteLock) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *FileWriteLock) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *FileWriteLock) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*Block)(nil), "client.Block")
	proto.RegisterType((*FileMeta)(nil), "client.FileMeta")
	proto.RegisterType((*Directory)(nil), "client.Directory")
	proto.RegisterType((*Volume)(nil), "client.Volume")
	proto.RegisterType((*HostStash)(nil), "client.HostStash")
	proto.RegisterType((*OpenRequest)(nil), "client.OpenRequest")
	proto.RegisterType((*GetBlockRequest)(nil), "client.GetBlockRequest")
	proto.RegisterType((*GetBlockResponse)(nil), "client.GetBlockResponse")
	proto.RegisterType((*AppendToBlockRequest)(nil), "client.AppendToBlockRequest")
	proto.RegisterType((*DeleteBlockRequest)(nil), "client.DeleteBlockRequest")
	proto.RegisterType((*WriteResult)(nil), "client.WriteResult")
	proto.RegisterType((*NewDirectoryContract)(nil), "client.NewDirectoryContract")
	proto.RegisterType((*AcquireFileWriteLockContract)(nil), "client.AcquireFileWriteLockContract")
	proto.RegisterType((*ReleaseFileWriteLockContract)(nil), "client.ReleaseFileWriteLockContract")
	proto.RegisterType((*TouchFileContract)(nil), "client.TouchFileContract")
	proto.RegisterType((*FileWriteLock)(nil), "client.FileWriteLock")
	proto.RegisterType((*Nothing)(nil), "client.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PCFS service

type PCFSClient interface {
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	AppendToBlock(ctx context.Context, in *AppendToBlockRequest, opts ...grpc.CallOption) (*WriteResult, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*WriteResult, error)
}

type pCFSClient struct {
	cc *grpc.ClientConn
}

func NewPCFSClient(cc *grpc.ClientConn) PCFSClient {
	return &pCFSClient{cc}
}

func (c *pCFSClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := grpc.Invoke(ctx, "/client.PCFS/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) AppendToBlock(ctx context.Context, in *AppendToBlockRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	out := new(WriteResult)
	err := grpc.Invoke(ctx, "/client.PCFS/AppendToBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	out := new(WriteResult)
	err := grpc.Invoke(ctx, "/client.PCFS/DeleteBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PCFS service

type PCFSServer interface {
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	AppendToBlock(context.Context, *AppendToBlockRequest) (*WriteResult, error)
	DeleteBlock(context.Context, *DeleteBlockRequest) (*WriteResult, error)
}

func RegisterPCFSServer(s *grpc.Server, srv PCFSServer) {
	s.RegisterService(&_PCFS_serviceDesc, srv)
}

func _PCFS_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_AppendToBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendToBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).AppendToBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/AppendToBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).AppendToBlock(ctx, req.(*AppendToBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PCFS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.PCFS",
	HandlerType: (*PCFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _PCFS_GetBlock_Handler,
		},
		{
			MethodName: "AppendToBlock",
			Handler:    _PCFS_AppendToBlock_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _PCFS_DeleteBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

func init() { proto.RegisterFile("proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 712 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x6d, 0x4f, 0xdb, 0x48,
	0x10, 0xc6, 0xb1, 0xc9, 0xcb, 0x24, 0x11, 0xb0, 0x87, 0x0e, 0x5f, 0xc4, 0xe9, 0x22, 0xa3, 0x43,
	0xf9, 0xc4, 0x21, 0xf8, 0x01, 0x77, 0x1c, 0x11, 0xdc, 0x49, 0x85, 0x56, 0x1b, 0xd4, 0x4a, 0xed,
	0x87, 0x68, 0xb1, 0x07, 0xb2, 0xc5, 0xf1, 0x9a, 0xdd, 0x75, 0x11, 0xfd, 0x0d, 0xfd, 0x6d, 0xed,
	0x5f, 0xaa, 0x76, 0xd7, 0xce, 0x0b, 0xa1, 0x2a, 0xdf, 0xe6, 0xcd, 0xcf, 0xce, 0x33, 0xf3, 0x8c,
	0x0c, 0x1b, 0xb9, 0x14, 0x5a, 0xfc, 0xc5, 0x72, 0x7e, 0x60, 0x2d, 0x52, 0x8f, 0x53, 0x8e, 0x99,
	0x8e, 0x4e, 0x61, 0xfd, 0xdf, 0x54, 0xc4, 0x77, 0x84, 0x40, 0x30, 0x61, 0x6a, 0x12, 0xd6, 0xfa,
	0xde, 0xa0, 0x43, 0xad, 0x4d, 0x36, 0xc1, 0xbf, 0xc3, 0xc7, 0xd0, 0xb7, 0x21, 0x63, 0x92, 0x6d,
	0x58, 0x9f, 0x08, 0xa5, 0x55, 0xe8, 0xf5, 0xfd, 0x41, 0x40, 0x9d, 0x13, 0x7d, 0xf5, 0xa0, 0x79,
	0xc6, 0x53, 0xbc, 0x40, 0xcd, 0x0c, 0x50, 0xc6, 0xa6, 0x18, 0x7a, 0x7d, 0x6f, 0xd0, 0xa2, 0xd6,
	0x36, 0x31, 0xc5, 0x3f, 0xa3, 0x05, 0x0f, 0xa8, 0xb5, 0xc9, 0x1e, 0x74, 0x53, 0xa6, 0xf4, 0x78,
	0x2a, 0x12, 0x7e, 0xc3, 0x31, 0xb1, 0xcf, 0x04, 0xb4, 0x63, 0x82, 0x17, 0x65, 0x8c, 0xfc, 0x0e,
	0x10, 0x4b, 0x64, 0x1a, 0x93, 0x31, 0xd3, 0x61, 0x60, 0x2b, 0x5a, 0x65, 0xe4, 0x44, 0x9b, 0xf4,
	0xb5, 0xe9, 0x7e, 0x6c, 0xd1, 0xeb, 0x7d, 0x6f, 0xd0, 0xa5, 0x2d, 0x1b, 0x19, 0x99, 0x27, 0xca,
	0xfe, 0x1b, 0xf3, 0xfe, 0xff, 0x84, 0xba, 0x4d, 0xab, 0xb0, 0xd9, 0xf7, 0x07, 0xed, 0xa3, 0xee,
	0x81, 0x9b, 0xc3, 0x81, 0x1d, 0x02, 0x2d, 0x93, 0xd1, 0x39, 0xb4, 0x86, 0x5c, 0x62, 0xac, 0x85,
	0x7c, 0x7c, 0x96, 0x50, 0x89, 0x5c, 0x5b, 0x9a, 0xcc, 0x0d, 0x4f, 0x51, 0x85, 0x7e, 0xdf, 0x1f,
	0x74, 0xa8, 0x73, 0xa2, 0x2f, 0x1e, 0xd4, 0xdf, 0x8a, 0xb4, 0x70, 0x33, 0x78, 0x01, 0x4c, 0x04,
	0x1d, 0x89, 0x79, 0xca, 0x63, 0xa6, 0xb9, 0xc8, 0x94, 0x1d, 0x4a, 0x97, 0x2e, 0xc5, 0x9e, 0xb0,
	0x0e, 0x9e, 0xb2, 0xfe, 0x0d, 0x9a, 0x52, 0x08, 0x3d, 0x4e, 0xb8, 0x0c, 0xd7, 0x2d, 0x72, 0xc3,
	0xf8, 0x43, 0x2e, 0xa3, 0x8f, 0xd0, 0xfa, 0x4f, 0x28, 0x3d, 0xd2, 0x66, 0xbb, 0x3b, 0xd0, 0x30,
	0xeb, 0x1b, 0xf3, 0xc4, 0xf6, 0x14, 0xd0, 0xba, 0x71, 0xff, 0x4f, 0x48, 0x0f, 0x9a, 0x31, 0xcb,
	0x59, 0xcc, 0xf5, 0x63, 0xb9, 0xb1, 0x99, 0x6f, 0x58, 0x14, 0x6a, 0xb6, 0x2c, 0x6b, 0x1b, 0xea,
	0xe2, 0x21, 0x43, 0x59, 0xee, 0xc7, 0x39, 0xd1, 0x31, 0xb4, 0x5f, 0xe7, 0x98, 0x51, 0xbc, 0x2f,
	0x50, 0xe9, 0x97, 0xd1, 0x8f, 0xf6, 0x60, 0xe3, 0x1c, 0xb5, 0x5b, 0x46, 0xf9, 0x61, 0x59, 0xe4,
	0xcd, 0x8b, 0xf6, 0x61, 0x73, 0x5e, 0xa4, 0x72, 0x91, 0x29, 0x3b, 0xdd, 0x84, 0x69, 0x56, 0x96,
	0x59, 0x3b, 0xfa, 0x00, 0xdb, 0x27, 0x79, 0x8e, 0x59, 0x72, 0x25, 0x96, 0x10, 0x97, 0xe7, 0xe7,
	0xb8, 0xaf, 0xaa, 0x66, 0x61, 0x29, 0x15, 0xb8, 0xbf, 0x00, 0xbe, 0x0f, 0x64, 0x88, 0x29, 0x6a,
	0xfc, 0x49, 0xb3, 0x23, 0x68, 0xbf, 0x93, 0x5c, 0x23, 0x45, 0x55, 0xa4, 0x9a, 0x84, 0xd0, 0x50,
	0x45, 0x1c, 0x23, 0xba, 0xa1, 0x37, 0x69, 0xe5, 0x9a, 0x8c, 0xc4, 0x29, 0xe3, 0x99, 0x2a, 0x87,
	0x5e, 0xb9, 0xab, 0x67, 0x18, 0xbd, 0x87, 0xed, 0x4b, 0x7c, 0x98, 0x49, 0xf4, 0x54, 0x64, 0x5a,
	0xb2, 0xd8, 0x32, 0xcb, 0x99, 0xc4, 0xcc, 0x2d, 0xdf, 0x75, 0xd1, 0x72, 0x91, 0x21, 0x97, 0x64,
	0x0f, 0x7c, 0x13, 0x37, 0x40, 0xed, 0xa3, 0xad, 0x4a, 0xfa, 0x33, 0x18, 0x6a, 0xb2, 0xd1, 0x21,
	0xec, 0x9e, 0xc4, 0xf7, 0x05, 0x97, 0x68, 0x4e, 0xda, 0xf6, 0xfe, 0x4a, 0xc4, 0x77, 0xb3, 0x37,
	0x56, 0x29, 0x1e, 0xc2, 0x2e, 0xc5, 0x14, 0x99, 0x7a, 0xf1, 0x17, 0x12, 0xb6, 0xae, 0x44, 0x11,
	0x4f, 0x4c, 0xfd, 0xac, 0xec, 0x0f, 0x68, 0xbb, 0x8e, 0xc6, 0x9a, 0x4f, 0xab, 0xbd, 0x80, 0x0b,
	0x5d, 0xf1, 0x85, 0x0b, 0xaa, 0x2d, 0x4b, 0xa8, 0xa2, 0xd4, 0xb1, 0xfd, 0x93, 0x5f, 0xa1, 0xfe,
	0xc9, 0x5e, 0x9c, 0x95, 0x63, 0x87, 0x96, 0x5e, 0x74, 0x01, 0xdd, 0xa5, 0xf6, 0x8c, 0x6c, 0x6f,
	0xa5, 0x28, 0xf2, 0xf2, 0x25, 0xe7, 0xcc, 0xc5, 0x5c, 0x5b, 0x10, 0x73, 0x45, 0x21, 0x98, 0x53,
	0x68, 0x41, 0xe3, 0x52, 0xe8, 0x09, 0xcf, 0x6e, 0x8f, 0xbe, 0x79, 0x10, 0xbc, 0x39, 0x3d, 0x1b,
	0x91, 0xbf, 0xa1, 0x59, 0x09, 0x93, 0xec, 0x54, 0xe3, 0x7d, 0xa2, 0xe7, 0x5e, 0xb8, 0x9a, 0x70,
	0x1a, 0x8e, 0xd6, 0xc8, 0x10, 0xba, 0x4b, 0x8a, 0x25, 0xbb, 0x55, 0xf1, 0x73, 0x42, 0xee, 0xfd,
	0x52, 0x65, 0x17, 0x14, 0x16, 0xad, 0x91, 0x7f, 0xa0, 0xbd, 0x20, 0x4d, 0xd2, 0x9b, 0x2d, 0x7a,
	0x45, 0xaf, 0x3f, 0x40, 0xb8, 0xae, 0xdb, 0x9f, 0xc4, 0xf1, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x27, 0x62, 0x6a, 0x37, 0x06, 0x00, 0x00,
}
