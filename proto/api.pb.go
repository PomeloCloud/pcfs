// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/api.proto

/*
Package client is a generated protocol buffer package.

It is generated from these files:
	proto/api.proto

It has these top-level messages:
	BlockData
	Block
	FileMeta
	Directory
	Volume
	HostStash
	OpenRequest
	GetBlockRequest
	AppendToBlockRequest
	DeleteBlockRequest
	CreateBlockRequest
	GetFileRequest
	GetVolumeRequest
	GetDirectoryRequest
	BlockStashSuggestionRequest
	BlockStashSuggestion
	WriteResult
	NewDirectoryContract
	AcquireFileWriteLockContract
	ReleaseFileWriteLockContract
	TouchFileContract
	ConfirmBlockContract
	CommitBlockContract
	FileWriteLock
	DirectoryItem
	ListDirectoryResponse
	ListDirectoryRequest
	Nothing
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DirectoryItem_ItemType int32

const (
	DirectoryItem_FILE DirectoryItem_ItemType = 0
	DirectoryItem_DIR  DirectoryItem_ItemType = 1
)

var DirectoryItem_ItemType_name = map[int32]string{
	0: "FILE",
	1: "DIR",
}
var DirectoryItem_ItemType_value = map[string]int32{
	"FILE": 0,
	"DIR":  1,
}

func (x DirectoryItem_ItemType) String() string {
	return proto.EnumName(DirectoryItem_ItemType_name, int32(x))
}
func (DirectoryItem_ItemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

type BlockData struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Size  uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	File  []byte `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Data  []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BlockData) Reset()                    { *m = BlockData{} }
func (m *BlockData) String() string            { return proto.CompactTextString(m) }
func (*BlockData) ProtoMessage()               {}
func (*BlockData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlockData) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *BlockData) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BlockData) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BlockData) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *BlockData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Block struct {
	Index uint64   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Hosts []uint64 `protobuf:"varint,2,rep,packed,name=hosts" json:"hosts,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Block) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Block) GetHosts() []uint64 {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type FileMeta struct {
	Name         string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size         uint64   `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	LastModified uint64   `protobuf:"varint,3,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	CreatedAt    uint64   `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	BlockSize    uint32   `protobuf:"varint,6,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	Key          []byte   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Blocks       []*Block `protobuf:"bytes,8,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *FileMeta) Reset()                    { *m = FileMeta{} }
func (m *FileMeta) String() string            { return proto.CompactTextString(m) }
func (*FileMeta) ProtoMessage()               {}
func (*FileMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileMeta) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileMeta) GetLastModified() uint64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *FileMeta) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *FileMeta) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *FileMeta) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *FileMeta) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type Directory struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key   []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Files [][]byte `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *Directory) Reset()                    { *m = Directory{} }
func (m *Directory) String() string            { return proto.CompactTextString(m) }
func (*Directory) ProtoMessage()               {}
func (*Directory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Directory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Directory) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Directory) GetFiles() [][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type Volume struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key          []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Replications uint32 `protobuf:"varint,3,opt,name=replications" json:"replications,omitempty"`
	BlockSize    uint32 `protobuf:"varint,4,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	RootDir      []byte `protobuf:"bytes,5,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Volume) GetReplications() uint32 {
	if m != nil {
		return m.Replications
	}
	return 0
}

func (m *Volume) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *Volume) GetRootDir() []byte {
	if m != nil {
		return m.RootDir
	}
	return nil
}

type HostStash struct {
	HostId   uint64 `protobuf:"varint,1,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	Capacity uint64 `protobuf:"varint,2,opt,name=capacity" json:"capacity,omitempty"`
	Used     uint64 `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	Owner    uint64 `protobuf:"varint,4,opt,name=owner" json:"owner,omitempty"`
}

func (m *HostStash) Reset()                    { *m = HostStash{} }
func (m *HostStash) String() string            { return proto.CompactTextString(m) }
func (*HostStash) ProtoMessage()               {}
func (*HostStash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HostStash) GetHostId() uint64 {
	if m != nil {
		return m.HostId
	}
	return 0
}

func (m *HostStash) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *HostStash) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *HostStash) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

type OpenRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *OpenRequest) Reset()                    { *m = OpenRequest{} }
func (m *OpenRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenRequest) ProtoMessage()               {}
func (*OpenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OpenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpenRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetBlockRequest struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	File  []byte `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetBlockRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *GetBlockRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetBlockRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type AppendToBlockRequest struct {
	Group  uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Index  uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Offset uint32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	File   []byte `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Data   []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AppendToBlockRequest) Reset()                    { *m = AppendToBlockRequest{} }
func (m *AppendToBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendToBlockRequest) ProtoMessage()               {}
func (*AppendToBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AppendToBlockRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *AppendToBlockRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AppendToBlockRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AppendToBlockRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *AppendToBlockRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteBlockRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteBlockRequest) Reset()                    { *m = DeleteBlockRequest{} }
func (m *DeleteBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBlockRequest) ProtoMessage()               {}
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteBlockRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CreateBlockRequest struct {
	Group     uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Index     uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	File      []byte `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CreateBlockRequest) Reset()                    { *m = CreateBlockRequest{} }
func (m *CreateBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBlockRequest) ProtoMessage()               {}
func (*CreateBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateBlockRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *CreateBlockRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CreateBlockRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *CreateBlockRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GetFileRequest struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	File  []byte `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetFileRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *GetFileRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type GetVolumeRequest struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetVolumeRequest) Reset()                    { *m = GetVolumeRequest{} }
func (m *GetVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVolumeRequest) ProtoMessage()               {}
func (*GetVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetVolumeRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *GetVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetDirectoryRequest struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetDirectoryRequest) Reset()                    { *m = GetDirectoryRequest{} }
func (m *GetDirectoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDirectoryRequest) ProtoMessage()               {}
func (*GetDirectoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetDirectoryRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *GetDirectoryRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type BlockStashSuggestionRequest struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Num   uint32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (m *BlockStashSuggestionRequest) Reset()                    { *m = BlockStashSuggestionRequest{} }
func (m *BlockStashSuggestionRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockStashSuggestionRequest) ProtoMessage()               {}
func (*BlockStashSuggestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BlockStashSuggestionRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *BlockStashSuggestionRequest) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type BlockStashSuggestion struct {
	Nodes []*HostStash `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *BlockStashSuggestion) Reset()                    { *m = BlockStashSuggestion{} }
func (m *BlockStashSuggestion) String() string            { return proto.CompactTextString(m) }
func (*BlockStashSuggestion) ProtoMessage()               {}
func (*BlockStashSuggestion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BlockStashSuggestion) GetNodes() []*HostStash {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type WriteResult struct {
	Succeed   bool   `protobuf:"varint,1,opt,name=succeed" json:"succeed,omitempty"`
	Remains   uint64 `protobuf:"varint,2,opt,name=remains" json:"remains,omitempty"`
	BlockHash []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *WriteResult) Reset()                    { *m = WriteResult{} }
func (m *WriteResult) String() string            { return proto.CompactTextString(m) }
func (*WriteResult) ProtoMessage()               {}
func (*WriteResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *WriteResult) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *WriteResult) GetRemains() uint64 {
	if m != nil {
		return m.Remains
	}
	return 0
}

func (m *WriteResult) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type NewDirectoryContract struct {
	ParentDir []byte     `protobuf:"bytes,1,opt,name=parent_dir,json=parentDir,proto3" json:"parent_dir,omitempty"`
	Dir       *Directory `protobuf:"bytes,3,opt,name=dir" json:"dir,omitempty"`
}

func (m *NewDirectoryContract) Reset()                    { *m = NewDirectoryContract{} }
func (m *NewDirectoryContract) String() string            { return proto.CompactTextString(m) }
func (*NewDirectoryContract) ProtoMessage()               {}
func (*NewDirectoryContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *NewDirectoryContract) GetParentDir() []byte {
	if m != nil {
		return m.ParentDir
	}
	return nil
}

func (m *NewDirectoryContract) GetDir() *Directory {
	if m != nil {
		return m.Dir
	}
	return nil
}

type AcquireFileWriteLockContract struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *AcquireFileWriteLockContract) Reset()                    { *m = AcquireFileWriteLockContract{} }
func (m *AcquireFileWriteLockContract) String() string            { return proto.CompactTextString(m) }
func (*AcquireFileWriteLockContract) ProtoMessage()               {}
func (*AcquireFileWriteLockContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AcquireFileWriteLockContract) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ReleaseFileWriteLockContract struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ReleaseFileWriteLockContract) Reset()                    { *m = ReleaseFileWriteLockContract{} }
func (m *ReleaseFileWriteLockContract) String() string            { return proto.CompactTextString(m) }
func (*ReleaseFileWriteLockContract) ProtoMessage()               {}
func (*ReleaseFileWriteLockContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReleaseFileWriteLockContract) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type TouchFileContract struct {
	ClientTime uint64 `protobuf:"varint,1,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Dir        []byte `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`
	Volume     []byte `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *TouchFileContract) Reset()                    { *m = TouchFileContract{} }
func (m *TouchFileContract) String() string            { return proto.CompactTextString(m) }
func (*TouchFileContract) ProtoMessage()               {}
func (*TouchFileContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TouchFileContract) GetClientTime() uint64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *TouchFileContract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TouchFileContract) GetDir() []byte {
	if m != nil {
		return m.Dir
	}
	return nil
}

func (m *TouchFileContract) GetVolume() []byte {
	if m != nil {
		return m.Volume
	}
	return nil
}

type ConfirmBlockContract struct {
	NodeId uint64              `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Index  uint64              `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	File   []byte              `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Req    *CreateBlockRequest `protobuf:"bytes,4,opt,name=req" json:"req,omitempty"`
}

func (m *ConfirmBlockContract) Reset()                    { *m = ConfirmBlockContract{} }
func (m *ConfirmBlockContract) String() string            { return proto.CompactTextString(m) }
func (*ConfirmBlockContract) ProtoMessage()               {}
func (*ConfirmBlockContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ConfirmBlockContract) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ConfirmBlockContract) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ConfirmBlockContract) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *ConfirmBlockContract) GetReq() *CreateBlockRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type CommitBlockContract struct {
	Index      uint64   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	ClientTime uint64   `protobuf:"varint,2,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
	NodeIds    []uint64 `protobuf:"varint,3,rep,packed,name=node_ids,json=nodeIds" json:"node_ids,omitempty"`
	File       []byte   `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *CommitBlockContract) Reset()                    { *m = CommitBlockContract{} }
func (m *CommitBlockContract) String() string            { return proto.CompactTextString(m) }
func (*CommitBlockContract) ProtoMessage()               {}
func (*CommitBlockContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CommitBlockContract) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CommitBlockContract) GetClientTime() uint64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *CommitBlockContract) GetNodeIds() []uint64 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

func (m *CommitBlockContract) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type FileWriteLock struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Owner uint64 `protobuf:"varint,2,opt,name=owner" json:"owner,omitempty"`
	Key   []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *FileWriteLock) Reset()                    { *m = FileWriteLock{} }
func (m *FileWriteLock) String() string            { return proto.CompactTextString(m) }
func (*FileWriteLock) ProtoMessage()               {}
func (*FileWriteLock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *FileWriteLock) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *FileWriteLock) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *FileWriteLock) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DirectoryItem struct {
	Type DirectoryItem_ItemType `protobuf:"varint,1,opt,name=type,enum=client.DirectoryItem_ItemType" json:"type,omitempty"`
	File *FileMeta              `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Dir  *Directory             `protobuf:"bytes,3,opt,name=dir" json:"dir,omitempty"`
}

func (m *DirectoryItem) Reset()                    { *m = DirectoryItem{} }
func (m *DirectoryItem) String() string            { return proto.CompactTextString(m) }
func (*DirectoryItem) ProtoMessage()               {}
func (*DirectoryItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DirectoryItem) GetType() DirectoryItem_ItemType {
	if m != nil {
		return m.Type
	}
	return DirectoryItem_FILE
}

func (m *DirectoryItem) GetFile() *FileMeta {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *DirectoryItem) GetDir() *Directory {
	if m != nil {
		return m.Dir
	}
	return nil
}

type ListDirectoryResponse struct {
	Name   string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key    []byte           `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Volume *Volume          `protobuf:"bytes,3,opt,name=volume" json:"volume,omitempty"`
	Items  []*DirectoryItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (m *ListDirectoryResponse) Reset()                    { *m = ListDirectoryResponse{} }
func (m *ListDirectoryResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDirectoryResponse) ProtoMessage()               {}
func (*ListDirectoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ListDirectoryResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListDirectoryResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListDirectoryResponse) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *ListDirectoryResponse) GetItems() []*DirectoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ListDirectoryRequest struct {
	Group uint64 `protobuf:"varint,1,opt,name=group" json:"group,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *ListDirectoryRequest) Reset()                    { *m = ListDirectoryRequest{} }
func (m *ListDirectoryRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDirectoryRequest) ProtoMessage()               {}
func (*ListDirectoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ListDirectoryRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *ListDirectoryRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func init() {
	proto.RegisterType((*BlockData)(nil), "client.BlockData")
	proto.RegisterType((*Block)(nil), "client.Block")
	proto.RegisterType((*FileMeta)(nil), "client.FileMeta")
	proto.RegisterType((*Directory)(nil), "client.Directory")
	proto.RegisterType((*Volume)(nil), "client.Volume")
	proto.RegisterType((*HostStash)(nil), "client.HostStash")
	proto.RegisterType((*OpenRequest)(nil), "client.OpenRequest")
	proto.RegisterType((*GetBlockRequest)(nil), "client.GetBlockRequest")
	proto.RegisterType((*AppendToBlockRequest)(nil), "client.AppendToBlockRequest")
	proto.RegisterType((*DeleteBlockRequest)(nil), "client.DeleteBlockRequest")
	proto.RegisterType((*CreateBlockRequest)(nil), "client.CreateBlockRequest")
	proto.RegisterType((*GetFileRequest)(nil), "client.GetFileRequest")
	proto.RegisterType((*GetVolumeRequest)(nil), "client.GetVolumeRequest")
	proto.RegisterType((*GetDirectoryRequest)(nil), "client.GetDirectoryRequest")
	proto.RegisterType((*BlockStashSuggestionRequest)(nil), "client.BlockStashSuggestionRequest")
	proto.RegisterType((*BlockStashSuggestion)(nil), "client.BlockStashSuggestion")
	proto.RegisterType((*WriteResult)(nil), "client.WriteResult")
	proto.RegisterType((*NewDirectoryContract)(nil), "client.NewDirectoryContract")
	proto.RegisterType((*AcquireFileWriteLockContract)(nil), "client.AcquireFileWriteLockContract")
	proto.RegisterType((*ReleaseFileWriteLockContract)(nil), "client.ReleaseFileWriteLockContract")
	proto.RegisterType((*TouchFileContract)(nil), "client.TouchFileContract")
	proto.RegisterType((*ConfirmBlockContract)(nil), "client.ConfirmBlockContract")
	proto.RegisterType((*CommitBlockContract)(nil), "client.CommitBlockContract")
	proto.RegisterType((*FileWriteLock)(nil), "client.FileWriteLock")
	proto.RegisterType((*DirectoryItem)(nil), "client.DirectoryItem")
	proto.RegisterType((*ListDirectoryResponse)(nil), "client.ListDirectoryResponse")
	proto.RegisterType((*ListDirectoryRequest)(nil), "client.ListDirectoryRequest")
	proto.RegisterType((*Nothing)(nil), "client.Nothing")
	proto.RegisterEnum("client.DirectoryItem_ItemType", DirectoryItem_ItemType_name, DirectoryItem_ItemType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PCFS service

type PCFSClient interface {
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockData, error)
	GetFileMeta(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*FileMeta, error)
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*Directory, error)
	ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	AppendToBlock(ctx context.Context, in *AppendToBlockRequest, opts ...grpc.CallOption) (*WriteResult, error)
	CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*WriteResult, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*WriteResult, error)
	SuggestBlockStash(ctx context.Context, in *BlockStashSuggestionRequest, opts ...grpc.CallOption) (*BlockStashSuggestion, error)
}

type pCFSClient struct {
	cc *grpc.ClientConn
}

func NewPCFSClient(cc *grpc.ClientConn) PCFSClient {
	return &pCFSClient{cc}
}

func (c *pCFSClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockData, error) {
	out := new(BlockData)
	err := grpc.Invoke(ctx, "/client.PCFS/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) GetFileMeta(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*FileMeta, error) {
	out := new(FileMeta)
	err := grpc.Invoke(ctx, "/client.PCFS/GetFileMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/client.PCFS/GetVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*Directory, error) {
	out := new(Directory)
	err := grpc.Invoke(ctx, "/client.PCFS/GetDirectory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	out := new(ListDirectoryResponse)
	err := grpc.Invoke(ctx, "/client.PCFS/ListDirectory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) AppendToBlock(ctx context.Context, in *AppendToBlockRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	out := new(WriteResult)
	err := grpc.Invoke(ctx, "/client.PCFS/AppendToBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	out := new(WriteResult)
	err := grpc.Invoke(ctx, "/client.PCFS/CreateBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	out := new(WriteResult)
	err := grpc.Invoke(ctx, "/client.PCFS/DeleteBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pCFSClient) SuggestBlockStash(ctx context.Context, in *BlockStashSuggestionRequest, opts ...grpc.CallOption) (*BlockStashSuggestion, error) {
	out := new(BlockStashSuggestion)
	err := grpc.Invoke(ctx, "/client.PCFS/SuggestBlockStash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PCFS service

type PCFSServer interface {
	GetBlock(context.Context, *GetBlockRequest) (*BlockData, error)
	GetFileMeta(context.Context, *GetFileRequest) (*FileMeta, error)
	GetVolume(context.Context, *GetVolumeRequest) (*Volume, error)
	GetDirectory(context.Context, *GetDirectoryRequest) (*Directory, error)
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	AppendToBlock(context.Context, *AppendToBlockRequest) (*WriteResult, error)
	CreateBlock(context.Context, *CreateBlockRequest) (*WriteResult, error)
	DeleteBlock(context.Context, *DeleteBlockRequest) (*WriteResult, error)
	SuggestBlockStash(context.Context, *BlockStashSuggestionRequest) (*BlockStashSuggestion, error)
}

func RegisterPCFSServer(s *grpc.Server, srv PCFSServer) {
	s.RegisterService(&_PCFS_serviceDesc, srv)
}

func _PCFS_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_GetFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).GetFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/GetFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).GetFileMeta(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).GetVolume(ctx, req.(*GetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_GetDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).GetDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/GetDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).GetDirectory(ctx, req.(*GetDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/ListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).ListDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_AppendToBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendToBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).AppendToBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/AppendToBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).AppendToBlock(ctx, req.(*AppendToBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).CreateBlock(ctx, req.(*CreateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PCFS_SuggestBlockStash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockStashSuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PCFSServer).SuggestBlockStash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.PCFS/SuggestBlockStash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PCFSServer).SuggestBlockStash(ctx, req.(*BlockStashSuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PCFS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.PCFS",
	HandlerType: (*PCFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _PCFS_GetBlock_Handler,
		},
		{
			MethodName: "GetFileMeta",
			Handler:    _PCFS_GetFileMeta_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _PCFS_GetVolume_Handler,
		},
		{
			MethodName: "GetDirectory",
			Handler:    _PCFS_GetDirectory_Handler,
		},
		{
			MethodName: "ListDirectory",
			Handler:    _PCFS_ListDirectory_Handler,
		},
		{
			MethodName: "AppendToBlock",
			Handler:    _PCFS_AppendToBlock_Handler,
		},
		{
			MethodName: "CreateBlock",
			Handler:    _PCFS_CreateBlock_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _PCFS_DeleteBlock_Handler,
		},
		{
			MethodName: "SuggestBlockStash",
			Handler:    _PCFS_SuggestBlockStash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

func init() { proto.RegisterFile("proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4b, 0x73, 0x1b, 0x45,
	0x10, 0xd6, 0x4a, 0xab, 0x57, 0x4b, 0x4a, 0xec, 0x89, 0x12, 0x6f, 0x14, 0x1b, 0x54, 0x63, 0x08,
	0xae, 0x82, 0x32, 0x29, 0xf9, 0xc0, 0xa3, 0xa0, 0x88, 0xb1, 0x62, 0xc7, 0x55, 0xb6, 0x81, 0xb5,
	0x0b, 0x28, 0x2e, 0x62, 0xb3, 0x1a, 0x5b, 0x83, 0xa5, 0x9d, 0xf5, 0xce, 0x2c, 0xc1, 0x70, 0xe3,
	0xc2, 0x85, 0x13, 0xff, 0x83, 0xbf, 0xc2, 0x0f, 0xe1, 0x57, 0x50, 0xf3, 0xd8, 0x87, 0x1e, 0xb6,
	0x05, 0x5c, 0x54, 0xd3, 0x3d, 0x33, 0xbd, 0xdd, 0xfd, 0x75, 0x7f, 0x3d, 0x82, 0xfb, 0x61, 0xc4,
	0x04, 0x7b, 0xdf, 0x0b, 0xe9, 0xb6, 0x5a, 0xa1, 0x8a, 0x3f, 0xa6, 0x24, 0x10, 0x98, 0x43, 0xfd,
	0xf3, 0x31, 0xf3, 0x2f, 0xfb, 0x9e, 0xf0, 0x50, 0x1b, 0xca, 0x17, 0x11, 0x8b, 0x43, 0xc7, 0xea,
	0x5a, 0x5b, 0xb6, 0xab, 0x05, 0xa9, 0xa5, 0xc1, 0x90, 0xfc, 0xe4, 0x14, 0xb5, 0x56, 0x09, 0x08,
	0x81, 0xcd, 0xe9, 0xcf, 0xc4, 0x29, 0x75, 0xad, 0xad, 0x96, 0xab, 0xd6, 0x52, 0x77, 0x4e, 0xc7,
	0xc4, 0xb1, 0xbb, 0xd6, 0x56, 0xd3, 0x55, 0x6b, 0xa9, 0x1b, 0x7a, 0xc2, 0x73, 0xca, 0x5a, 0x27,
	0xd7, 0x78, 0x07, 0xca, 0xea, 0xa3, 0x99, 0x69, 0x2b, 0x6f, 0xba, 0x0d, 0xe5, 0x11, 0xe3, 0x82,
	0x3b, 0xc5, 0x6e, 0x49, 0x6a, 0x95, 0x80, 0xff, 0xb2, 0xa0, 0xb6, 0x4f, 0xc7, 0xe4, 0x98, 0x08,
	0x4f, 0x5a, 0x0d, 0xbc, 0x09, 0x51, 0xf7, 0xea, 0xae, 0x5a, 0xa7, 0x1e, 0x69, 0x37, 0xb5, 0x47,
	0x9b, 0xd0, 0x1a, 0x7b, 0x5c, 0x0c, 0x26, 0x6c, 0x48, 0xcf, 0x29, 0x19, 0x2a, 0x77, 0x6d, 0xb7,
	0x29, 0x95, 0xc7, 0x46, 0x87, 0x36, 0x00, 0xfc, 0x88, 0x78, 0x82, 0x0c, 0x07, 0x9e, 0x50, 0xce,
	0xdb, 0x6e, 0xdd, 0x68, 0x76, 0x85, 0xdc, 0x7e, 0x25, 0xbd, 0x1d, 0x28, 0xeb, 0x15, 0x15, 0x6f,
	0x5d, 0x69, 0x4e, 0xe5, 0x27, 0x56, 0xa0, 0x74, 0x49, 0xae, 0x9d, 0xaa, 0x8a, 0x4f, 0x2e, 0xd1,
	0xdb, 0x50, 0x51, 0xdb, 0xdc, 0xa9, 0x75, 0x4b, 0x5b, 0x8d, 0x5e, 0x6b, 0x5b, 0x27, 0x7b, 0x5b,
	0x05, 0xed, 0x9a, 0x4d, 0x7c, 0x00, 0xf5, 0x3e, 0x8d, 0x88, 0x2f, 0x58, 0x74, 0xbd, 0x30, 0x20,
	0x63, 0xb9, 0x98, 0x59, 0x6e, 0x43, 0x59, 0x26, 0x95, 0x3b, 0xa5, 0x6e, 0x69, 0xab, 0xe9, 0x6a,
	0x01, 0xff, 0x6e, 0x41, 0xe5, 0x6b, 0x36, 0x8e, 0x75, 0x0e, 0x96, 0x30, 0x83, 0xa1, 0x19, 0x91,
	0x70, 0x4c, 0x7d, 0x4f, 0x50, 0x16, 0x70, 0x83, 0xe1, 0x94, 0x6e, 0x26, 0x6a, 0x7b, 0x36, 0xea,
	0xc7, 0x50, 0x8b, 0x18, 0x13, 0x83, 0x21, 0x8d, 0x0c, 0xb4, 0x55, 0x29, 0xf7, 0x69, 0x84, 0x7f,
	0x80, 0xfa, 0x4b, 0xc6, 0xc5, 0xa9, 0xf0, 0xf8, 0x08, 0xad, 0x41, 0x55, 0xc2, 0x37, 0xa0, 0x43,
	0x83, 0x71, 0x45, 0x8a, 0x87, 0x43, 0xd4, 0x81, 0x9a, 0xef, 0x85, 0x9e, 0x4f, 0xc5, 0xb5, 0x41,
	0x2c, 0x95, 0x65, 0x14, 0x31, 0x4f, 0xc1, 0x52, 0x6b, 0x19, 0x3a, 0x7b, 0x1d, 0x90, 0xc8, 0xe0,
	0xa3, 0x05, 0xbc, 0x03, 0x8d, 0x2f, 0x42, 0x12, 0xb8, 0xe4, 0x2a, 0x26, 0x5c, 0x2c, 0x17, 0x3e,
	0xfe, 0x0a, 0xee, 0x1f, 0x10, 0xa1, 0xc1, 0x30, 0x17, 0xff, 0x65, 0xe5, 0xab, 0x2a, 0x2f, 0x65,
	0x55, 0x8e, 0x7f, 0xb5, 0xa0, 0xbd, 0x1b, 0x86, 0x24, 0x18, 0x9e, 0xb1, 0xff, 0x6c, 0xf8, 0x11,
	0x54, 0xd8, 0xf9, 0x39, 0x27, 0xc2, 0x00, 0x62, 0xa4, 0xa5, 0xdb, 0xea, 0x29, 0xa0, 0x3e, 0x19,
	0x13, 0x41, 0xa6, 0x3c, 0x30, 0xf1, 0x5b, 0x59, 0xfc, 0x11, 0xa0, 0x3d, 0x55, 0xdd, 0xff, 0x3b,
	0x05, 0x79, 0x8f, 0xd6, 0xa1, 0xce, 0xe9, 0x45, 0xe0, 0x89, 0x38, 0x22, 0xc6, 0xad, 0x4c, 0x81,
	0x3f, 0x86, 0x7b, 0x07, 0x44, 0xc8, 0xfe, 0xbd, 0xfd, 0x7b, 0x89, 0xe5, 0x62, 0x2e, 0xb9, 0x9f,
	0xc0, 0xca, 0x01, 0x11, 0xba, 0xc2, 0xef, 0xbc, 0xad, 0xf0, 0x2f, 0x66, 0xf8, 0xe3, 0x4f, 0xe1,
	0xc1, 0x01, 0x11, 0x69, 0xa7, 0xdd, 0x6e, 0x60, 0xbe, 0x58, 0x5e, 0xc0, 0x13, 0x95, 0x26, 0x55,
	0xce, 0xa7, 0xf1, 0xc5, 0x05, 0xe1, 0xb2, 0x41, 0xee, 0x34, 0x13, 0xc4, 0x13, 0x65, 0xa6, 0xe5,
	0xca, 0x25, 0xfe, 0x0c, 0xda, 0x8b, 0xcc, 0xa0, 0x77, 0xa0, 0x1c, 0xb0, 0x21, 0xe1, 0x8e, 0xa5,
	0xa8, 0x62, 0x35, 0xa1, 0x8a, 0xb4, 0x83, 0x5c, 0xbd, 0x8f, 0xbf, 0x87, 0xc6, 0x37, 0x11, 0x15,
	0xc4, 0x25, 0x3c, 0x1e, 0x0b, 0xe4, 0x40, 0x95, 0xc7, 0xbe, 0x4f, 0x88, 0xee, 0xab, 0x9a, 0x9b,
	0x88, 0x72, 0x27, 0x22, 0x13, 0x8f, 0x06, 0xdc, 0x60, 0x96, 0x88, 0x59, 0x4b, 0x8f, 0x3c, 0x3e,
	0x32, 0xe5, 0xab, 0x5b, 0xfa, 0xa5, 0xc7, 0x47, 0xf8, 0x3b, 0x68, 0x9f, 0x90, 0xd7, 0x69, 0xa2,
	0xf6, 0x58, 0x20, 0x22, 0xcf, 0x57, 0xfc, 0x17, 0x7a, 0x11, 0x09, 0x74, 0xb3, 0xeb, 0x3a, 0xaa,
	0x6b, 0x4d, 0x9f, 0x46, 0x68, 0x13, 0x4a, 0x52, 0x2f, 0xcd, 0xe5, 0xfc, 0xcf, 0xf2, 0x2d, 0x77,
	0xf1, 0x33, 0x58, 0xdf, 0xf5, 0xaf, 0x62, 0x1a, 0x11, 0x59, 0x02, 0x2a, 0x90, 0x23, 0xe6, 0x5f,
	0xa6, 0xdf, 0x98, 0x2f, 0xd2, 0x67, 0xb0, 0xee, 0x92, 0x31, 0xf1, 0xf8, 0xd2, 0x37, 0x22, 0x58,
	0x3d, 0x63, 0xb1, 0x3f, 0x92, 0xe7, 0xd3, 0x63, 0x6f, 0x42, 0x43, 0x7b, 0x34, 0x10, 0xd4, 0x10,
	0x83, 0xed, 0x82, 0x56, 0x9d, 0xd1, 0x1c, 0x63, 0x16, 0xa7, 0x29, 0x23, 0x09, 0xa9, 0xa9, 0xfc,
	0x97, 0xad, 0xf9, 0xa3, 0xaa, 0x3f, 0x53, 0xf2, 0x46, 0xc2, 0xbf, 0x59, 0xd0, 0xde, 0x63, 0xc1,
	0x39, 0x8d, 0x26, 0x0a, 0xde, 0xf4, 0xbb, 0x6b, 0x50, 0x95, 0xb8, 0xe5, 0x78, 0x4f, 0x8a, 0x87,
	0xc3, 0xe5, 0x39, 0x05, 0xbd, 0x07, 0xa5, 0x88, 0x5c, 0xa9, 0x0f, 0x36, 0x7a, 0x9d, 0x24, 0xb1,
	0xf3, 0x9d, 0xeb, 0xca, 0x63, 0xf8, 0x17, 0x78, 0xb0, 0xc7, 0x26, 0x13, 0x2a, 0xa6, 0xfd, 0x58,
	0x3c, 0x61, 0x67, 0xb2, 0x52, 0x9c, 0xcb, 0xca, 0x63, 0xa8, 0x19, 0xf7, 0xf5, 0xac, 0xb1, 0xdd,
	0xaa, 0xf6, 0x9f, 0x2f, 0xea, 0x7d, 0x7c, 0x0c, 0xad, 0x29, 0x94, 0x6e, 0x26, 0x13, 0xcd, 0xe1,
	0xc5, 0x1c, 0x87, 0x27, 0x48, 0xda, 0x19, 0x92, 0x7f, 0x5a, 0xd0, 0x4a, 0x0b, 0xe8, 0x50, 0x90,
	0x09, 0xea, 0x81, 0x2d, 0xae, 0x43, 0x8d, 0xdf, 0xbd, 0xde, 0x1b, 0x73, 0x55, 0x26, 0x0f, 0x6d,
	0xcb, 0x9f, 0xb3, 0xeb, 0x90, 0xb8, 0xea, 0x2c, 0x7a, 0x2b, 0x47, 0x25, 0x8d, 0xde, 0x4a, 0x72,
	0x27, 0x79, 0x43, 0x98, 0x2c, 0x2f, 0x55, 0xbe, 0x1b, 0x50, 0x4b, 0x8c, 0xa3, 0x1a, 0xd8, 0xfb,
	0x87, 0x47, 0x2f, 0x56, 0x0a, 0xa8, 0x0a, 0xa5, 0xfe, 0xa1, 0xbb, 0x62, 0xe1, 0x3f, 0x2c, 0x78,
	0x78, 0x44, 0x79, 0x9e, 0x64, 0x78, 0xc8, 0x02, 0xbe, 0xec, 0x3c, 0x7e, 0x9a, 0x56, 0x97, 0x76,
	0xe3, 0x5e, 0xe2, 0x86, 0xe1, 0x3c, 0xb3, 0x8b, 0xde, 0x85, 0x32, 0x15, 0x64, 0xc2, 0x1d, 0x5b,
	0x91, 0xc5, 0xc3, 0x85, 0x69, 0x70, 0xf5, 0x19, 0xfc, 0x1c, 0xda, 0x33, 0x3e, 0xdd, 0xc1, 0x9c,
	0xa1, 0x27, 0x46, 0x49, 0x1b, 0xc8, 0x35, 0xae, 0x43, 0xf5, 0x84, 0x89, 0x11, 0x0d, 0x2e, 0x7a,
	0x7f, 0xdb, 0x60, 0x7f, 0xb9, 0xb7, 0x7f, 0x8a, 0x3e, 0x84, 0x5a, 0x32, 0x3b, 0xd1, 0x5a, 0xf2,
	0xfd, 0x99, 0x69, 0xda, 0x59, 0x9d, 0x7a, 0xf0, 0xc8, 0xa7, 0x25, 0x2e, 0xa0, 0x8f, 0xa0, 0x61,
	0x26, 0x80, 0x7a, 0xc1, 0x3d, 0xca, 0x5d, 0xce, 0x8d, 0x85, 0xce, 0x1c, 0x4e, 0xb8, 0x80, 0x3e,
	0x80, 0x7a, 0x3a, 0x00, 0x90, 0x93, 0xbb, 0x38, 0x35, 0x13, 0x3a, 0x33, 0x69, 0xc3, 0x05, 0xf4,
	0x1c, 0x9a, 0x79, 0xee, 0x47, 0x4f, 0x72, 0x77, 0x67, 0x13, 0xd3, 0x99, 0x07, 0x1f, 0x17, 0xd0,
	0x09, 0xb4, 0xa6, 0xb2, 0x88, 0xd6, 0x93, 0x53, 0x8b, 0x92, 0xdb, 0xd9, 0xb8, 0x61, 0x57, 0x97,
	0x03, 0x2e, 0xa0, 0x3e, 0xb4, 0xa6, 0xde, 0x09, 0x99, 0xbd, 0x45, 0xcf, 0x87, 0xce, 0x83, 0x64,
	0x37, 0xc7, 0xfd, 0x2a, 0xae, 0x46, 0x8e, 0x07, 0xd0, 0x2d, 0xe4, 0x70, 0x8b, 0x85, 0xdc, 0x5b,
	0x21, 0xb3, 0x30, 0xff, 0x80, 0xb8, 0xc9, 0xc2, 0xb7, 0xb0, 0x6a, 0xe6, 0x58, 0x36, 0xd8, 0xd0,
	0xe6, 0x14, 0xf2, 0x8b, 0x67, 0x66, 0x67, 0xfd, 0xb6, 0x43, 0xb8, 0xf0, 0xaa, 0xa2, 0xfe, 0xa2,
	0xec, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x95, 0x23, 0x8b, 0xb5, 0x0c, 0x00, 0x00,
}
